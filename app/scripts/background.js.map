{"version":3,"sources":["../scripts.babel/background.js"],"names":[],"mappings":"AAAA;;;;;;;AAAY,CAAC;;;;AAOb,IAAM,SAAS,GAAG,IAAI,CAAC;AACvB,IAAM,YAAY,GAAG,MAAM;AAAC,AAC5B,IAAM,UAAU,GAAG,KAAK;AAAC,AACzB,IAAM,MAAM,GAAG;AACb,OAAK,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,EAAE,SAAS;CACnD,CAAC;;AAEF,IAAI,UAAU,GAAG,EAAE,CAAC;AACpB,IAAI,WAAW,YAAA,CAAC;AAChB,IAAI,qBAAqB,YAAA,CAAC;AAC1B,IAAI,MAAM,YAAA,CAAC;AACX,IAAI,QAAQ,GAAG,IAAI,CAAC;;AAEpB,IAAI,gBAAgB,YAAA,CAAC;AACrB,IAAI,SAAS,GAAG,EAAE,CAAC;AACnB,IAAI,OAAO,GAAG,EAAE,CAAC;AACjB,IAAI,SAAS,GAAG,IAAI,GAAG,EAAE,CAAC;AAC1B,IAAI,eAAe,YAAA,CAAC;;AAGpB,SAAS,QAAQ,CAAC,EAAE,EAAE;;AAEpB,MAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAE,EAAE,GAAG,IAAI,CAAE,CAAC;AACnC,MAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAE,IAAI,GAAG,EAAE,CAAE,CAAC;AACnC,MAAI,aAAa,GAAG,AAAC,IAAI,GAAG,EAAE,GAAI,EAAE,CAAC;AACrC,eAAa,GAAG,aAAa,CAAC,MAAM,KAAK,CAAC,GAAG,aAAa,GAAG,GAAG,GAAG,aAAa,CAAC;;AAEjF,SAAO,IAAI,GAAG,GAAG,GAAG,aAAa,CAAC;CACnC;;;;;;;;AAAA,AAQD,SAAS,UAAU,GAAgD;MAA/C,KAAK,yDAAG,gBAAgB;MAAE,SAAS,yDAAG,OAAO;;AAE/D,OAAK,CAAC,OAAO,CAAE,UAAC,IAAI,EAAE,KAAK,EAAK;;AAE9B,QAAI,IAAI,CAAC,QAAQ,EAAE;;AAEjB,UAAI,KAAK,GAAG,MAAM,CAAC,MAAM,CAAE,EAAE,EAAE,IAAI,CAAE,CAAC;AACtC,WAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAE,UAAA,KAAK;eAAI,KAAK,CAAC,QAAQ;OAAA,CAAE,CAAC;;AAEjE,eAAS,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;AACzB,gBAAU,CAAC,KAAK,CAAC,QAAQ,EAAE,KAAK,CAAC,QAAQ,CAAC;AAAC,KAC5C;GACF,CAAC,CAAC;CACJ;;AAED,SAAS,YAAY,CAAC,QAAQ,EAAE;;AAE9B,UAAQ,CAAC,OAAO,CAAC,UAAA,QAAQ,EAAI;;AAE3B,QAAI,QAAQ,CAAC,GAAG,EAAE;AAChB,eAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KAC1B;;AAED,QAAI,QAAQ,CAAC,QAAQ,EAAE;AACrB,kBAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;KACjC;GACF,CAAC,CAAC;CACJ;;AAED,SAAS,sBAAsB,CAAC,QAAQ,EAAE;AACxC,cAAY,CAAC,QAAQ,CAAC,CAAC;AACvB,YAAU,CAAC,QAAQ,CAAC,CAAC;CACtB;;AAGD,SAAS,sBAAsB,CAAC,EAAE,EAAE;;;;;AAKlC,QAAM,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE,EAAE,UAAA,QAAQ,EAAI;;;AAC3C,kBAAA,SAAS,EAAC,IAAI,MAAA,gCAAK,QAAQ,CAAC,MAAM,CAAC,UAAA,KAAK;aAAI,KAAK,CAAC,GAAG;KAAA,CAAC,EAAE,CAAC;GAC1D,CAAC,CAAC;CACJ;;AAED,SAAS,gBAAgB,GAAG;;AAE1B,WAAS,GAAG,EAAE;;AAAC,AAEf,MAAK,CAAC,SAAS,CAAC,IAAI,EAAG;AACrB,gBAAY,CAAC,gBAAgB,CAAC,CAAC;GAChC,MACI;AACH,aAAS,CAAC,OAAO,CAAE,UAAA,EAAE,EAAI;AACvB,4BAAsB,CAAC,EAAE,CAAC,CAAC;KAC5B,CAAC,CAAC;GACJ;CACF;;AAED,SAAS,uBAAuB,GAAG;AACjC,QAAM,CAAC,SAAS,CAAC,OAAO,CAAE,UAAA,QAAQ,EAAI;AACpC,oBAAgB,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;AACxC,0BAAsB,CAAC,gBAAgB,CAAC,CAAC;GAC1C,CAAC,CAAC;CACJ;;;;;AAAA,AAKD,SAAS,UAAU,GAAG;;AAEpB,MAAI,UAAU,GAAG,MAAM,CAAC;AACxB,MAAI,YAAY,GAAG,UAAU,GAAG,YAAY,GAAG,OAAO,GAClD,UAAU,GAAG,UAAU,GAAG,OAAO,GAAG,KAAK,CAAC;;AAE9C,QAAM,CAAC,aAAa,CAAC,uBAAuB,CAAC,EAAC,KAAK,EAAE,MAAM,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;;AAE7E,MAAK,UAAU,GAAG,YAAY,EAAG;AAC/B,cAAU,CAAC,YAAW;AACpB,YAAM,CAAC,aAAa,CAAC,uBAAuB,CAAC,EAAC,KAAK,EAAE,MAAM,CAAC,KAAK,EAAC,CAAC,CAAC;KACrE,EAAE,UAAU,GAAG,YAAY,CAAC,CAAC;GAC/B;AACD,MAAK,UAAU,GAAG,UAAU,EAAG;AAC7B,cAAU,CAAC,YAAW;AACpB,YAAM,CAAC,aAAa,CAAC,uBAAuB,CAAC,EAAC,KAAK,EAAE,MAAM,CAAC,GAAG,EAAC,CAAC,CAAC;KACnE,EAAE,UAAU,GAAG,UAAU,CAAC,CAAC;GAC7B;;;AAAA,AAGD,aAAW,GAAG,WAAW,CAAC,YAAW;;AAEnC,cAAU,IAAI,SAAS,CAAC;AACxB,UAAM,CAAC,aAAa,CAAC,YAAY,CAAC,EAAE,IAAI,EAAE,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;;AAElE,QAAI,UAAU,KAAK,CAAC,EACpB;AACE,YAAM,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;AAClC,mBAAa,CAAC,WAAW,CAAC,CAAC;KAC5B;GAEF,EAAE,SAAS,CAAE,CAAC;CAChB;;AAED,SAAS,YAAY,GAAG;;AAEtB,QAAM,CAAC,IAAI,CAAC,MAAM,CAAC;AACjB,OAAG,EAAE,eAAe,CAAC,GAAG;GACzB,EACD,UAAA,GAAG,EAAI;AACL,WAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AACjB,cAAU,GAAG,GAAG,CAAC;GAClB,CAAC,CAAC;;AAEH,MAAI,QAAQ,EAAE;AACZ,cAAU,EAAE,CAAC;GACd;CAEF;;AAED,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,WAAW,CAAC,UAAA,OAAO,EAAI;;AAEhD,SAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,OAAO,CAAC,eAAe,CAAC,CAAC;AACxD,yBAAuB,EAAE,CAAC;CAC3B,CAAC,CAAC;;AAEH,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,UAAA,KAAK,EAAI;;AAEzC,MAAI,KAAK,KAAK,UAAU,CAAC,EAAE,EAAE;;AAE3B,iBAAa,CAAC,WAAW,CAAC,CAAC;AAC3B,UAAM,CAAC,aAAa,CAAC,YAAY,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC;AAChD,cAAU,GAAG,EAAE,CAAC;;AAEhB,QAAI,qBAAqB,EAAE;AACzB,kBAAY,EAAE,CAAC;AACf,2BAAqB,GAAG,KAAK,CAAC;KAC/B;GACF;CACF,CAAC,CAAC;;AAEH,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,YAAW;;AAC9C,SAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;CAClC,CAAC,CAAC;;AAEH,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,UAAE,OAAO,EAAE,MAAM,EAAE,YAAY,EAAM;;;;;;AAKxE,UAAQ,OAAO,CAAC,MAAM;;AAEpB,SAAK,MAAM;;AAET,YAAM,GAAG,OAAO,CAAC,MAAM,CAAC;AACxB,qBAAe,GAAG,OAAO,CAAC,QAAQ,CAAC;;AAEnC,UAAI,UAAU,CAAC,EAAE,EACjB;AACE,6BAAqB,GAAG,IAAI,CAAC;AAC7B,cAAM,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC;AAAC,OACnC,MAED;AACE,sBAAY,EAAE,CAAC;SAChB;AACD,YAAM;;AAAA,AAGR,SAAK,eAAe;AAClB,6BAAuB,EAAE,CAAC;AAC1B,YAAM;;AAAA,AAGR,SAAK,cAAc;;AAEjB,WAAK,IAAI,EAAE,IAAI,OAAO,CAAC,OAAO,EAAE;;AAE9B,YAAI,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;;AAErC,YAAK,UAAU,EAAG;AAChB,mBAAS,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;SACnB,MACI;AACH,mBAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;SACtB;OACF;;AAED,sBAAgB,EAAE,CAAC;AACnB,kBAAY,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;;AAEhC,YAAM;AAAA,GACT;CAEF,CAAC,CAAC;;AAEH,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,WAAW,CAAC,uBAAuB,CAAC,CAAC;AAChE,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,WAAW,CAAE,UAAA,EAAE,EAAI;AAC5C,WAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;AACrB,yBAAuB,EAAE,CAAC;CAC3B,CAAC,CAAC","file":"background.js","sourcesContent":["'use strict';\n\n/*\nlet startTime = new Date.now();\nlet currentMillis = today.getMilliseconds()\n*/\n\nconst TIME_DECR = 1000;\nconst AMBER_PERIOD = 120000; // 2 min\nconst RED_PERIOD = 60000; // 1 min\nconst COLORS = {\n  GREEN: '#00CC00', AMBER: '#FFC200', RED: '#FF0000'\n};\n\nlet currentTab = {};\nlet countdownID;\nlet tabRemovedByExtension;\nlet millis;\nlet hasTimer = true;\n\nlet originalNodeTree;\nlet bookmarks = [];\nlet folders = [];\nlet folderIDs = new Set();\nlet currentBookmark;\n\n\nfunction msToTime(ms) {\n  // to seconds\n  let secs = Math.floor( ms / 1000 );\n  let mins = Math.floor( secs / 60 );\n  let remainingSecs = (secs % 60) + '';\n  remainingSecs = remainingSecs.length === 2 ? remainingSecs : '0' + remainingSecs;\n\n  return mins + ':' + remainingSecs;\n}\n\n/*\n    Bookmark sorting\n*/\n\n// function\n\nfunction getFolders(nodes = originalNodeTree, folderArr = folders) {\n\n  nodes.forEach( (node, index) => {\n\n    if (node.children) {\n\n      let clone = Object.assign( {}, node );\n      clone.children = node.children.filter( child => child.children );\n\n      folderArr[index] = clone;\n      getFolders(clone.children, clone.children); // ugly, not dry, find a better signature\n    }\n  });\n}\n\nfunction getBookmarks(nodeTree) {\n\n  nodeTree.forEach(bookmark => {\n\n    if (bookmark.url) {\n      bookmarks.push(bookmark);\n    }\n\n    if (bookmark.children) {\n      getBookmarks(bookmark.children);\n    }\n  });\n}\n\nfunction getBookmarksAndFolders(nodeTree) {\n  getBookmarks(nodeTree);\n  getFolders(nodeTree);\n}\n\n\nfunction getBookmarksByFolderID(id) {\n\n  // Only get shallow results\n  // All selected folders (including children) have a separate id entry\n\n  chrome.bookmarks.getChildren(id, children => {\n    bookmarks.push( ...children.filter(child => child.url) );\n  });\n}\n\nfunction refreshBookmarks() {\n\n  bookmarks = []; // reset the list\n\n  if ( !folderIDs.size ) {\n    getBookmarks(originalNodeTree);\n  }\n  else {\n    folderIDs.forEach( id => {\n      getBookmarksByFolderID(id);\n    });\n  }\n}\n\nfunction getBookmarkTreeAndParse() {\n  chrome.bookmarks.getTree( nodeTree => {\n    originalNodeTree = nodeTree[0].children;\n    getBookmarksAndFolders(originalNodeTree);\n  });\n}\n\n// function orderFolders() {\n// }\n\nfunction setupTimer() {\n\n  let timePeriod = millis;\n  let initialColor = timePeriod > AMBER_PERIOD ? 'GREEN'\n    : timePeriod > RED_PERIOD ? 'AMBER' : 'RED';\n\n  chrome.browserAction.setBadgeBackgroundColor({color: COLORS[initialColor] });\n\n  if ( timePeriod > AMBER_PERIOD ) {\n    setTimeout(function() {\n      chrome.browserAction.setBadgeBackgroundColor({color: COLORS.AMBER});\n    }, timePeriod - AMBER_PERIOD);\n  }\n  if ( timePeriod > RED_PERIOD ) {\n    setTimeout(function() {\n      chrome.browserAction.setBadgeBackgroundColor({color: COLORS.RED});\n    }, timePeriod - RED_PERIOD);\n  }\n\n  // Initialise timer\n  countdownID = setInterval(function() {\n\n    timePeriod -= TIME_DECR;\n    chrome.browserAction.setBadgeText({ text: msToTime(timePeriod) });\n\n    if (timePeriod === 0)\n    {\n      chrome.tabs.remove(currentTab.id);\n      clearInterval(countdownID);\n    }\n\n  }, TIME_DECR );\n}\n\nfunction openBookmark() {\n\n  chrome.tabs.create({\n    url: currentBookmark.url\n  },\n  tab => {\n    console.log(tab);\n    currentTab = tab;\n  });\n\n  if (hasTimer) {\n    setupTimer();\n  }\n\n}\n\nchrome.runtime.onInstalled.addListener(details => {\n\n  console.log('previousVersion', details.previousVersion);\n  getBookmarkTreeAndParse();\n});\n\nchrome.tabs.onRemoved.addListener(tabID => {\n\n  if (tabID === currentTab.id) {\n\n    clearInterval(countdownID);\n    chrome.browserAction.setBadgeText({ text: '' });\n    currentTab = {};\n\n    if (tabRemovedByExtension) {\n      openBookmark();\n      tabRemovedByExtension = false;\n    }\n  }\n});\n\nchrome.runtime.onStartup.addListener(function() { // I cannot see when this event is fired\n  console.log('runtime.onStartup');\n});\n\nchrome.runtime.onMessage.addListener(( request, sender, sendResponse ) => { /*, sender*/\n\n  // clean up this switch\n  // move the blocks into their own functions outside\n\n  switch (request.action) {\n\n    case 'open':\n\n      millis = request.millis;\n      currentBookmark = request.bookmark;\n\n      if (currentTab.id)\n      {\n        tabRemovedByExtension = true;\n        chrome.tabs.remove(currentTab.id); // destroy previous roulette tab, callback will openBookmark when ready\n      }\n      else\n      {\n        openBookmark();\n      }\n      break;\n\n\n    case 'loadBookmarks':\n      getBookmarkTreeAndParse();\n      break;\n\n\n    case 'toggleFolder':\n\n      for (let id in request.folders) {\n\n        let isSelected = request.folders[id];\n\n        if ( isSelected ) {\n          folderIDs.add(id);\n        }\n        else {\n          folderIDs.delete(id);\n        }\n      }\n\n      refreshBookmarks();\n      sendResponse({ success: true });\n\n      break;\n  }\n\n});\n\nchrome.bookmarks.onCreated.addListener(getBookmarkTreeAndParse);\nchrome.bookmarks.onRemoved.addListener( id => {\n  folderIDs.delete(id);\n  getBookmarkTreeAndParse();\n});\n"]}