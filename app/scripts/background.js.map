{"version":3,"sources":["../scripts.babel/background.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAAY,CAAC;AAiBb,IAAM,WAAW,GAAG,MAAM;AAAC,AAC3B,IAAI,UAAU,GAAG,WAAW,CAAC;AAC7B,IAAM,SAAS,GAAG,IAAI;;;;;;;;AAAC,AASvB,SAAS,UAAU,CAAC,MAAM,EAAE;;AAE1B,MAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAE,MAAM,GAAG,IAAI,CAAE,CAAC;AACvC,MAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAE,IAAI,GAAG,EAAE,CAAE,CAAC;AACnC,MAAI,aAAa,GAAG,AAAC,IAAI,GAAG,EAAE,GAAI,EAAE,CAAC;AACrC,eAAa,GAAG,aAAa,CAAC,MAAM,KAAK,CAAC,GAAG,aAAa,GAAG,GAAG,GAAG,aAAa,CAAC;;AAEjF,SAAO,IAAI,GAAG,GAAG,GAAG,aAAa,CAAC;CACnC;;;;;;;;;AAAA,AASD,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,WAAW,CAAC,UAAA,OAAO,EAAI;AAChD,SAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,OAAO,CAAC,eAAe,CAAC,CAAC;CACzD,CAAC;;;;;AAAC,AAMH,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,UAAS,oBAAO,EAAc;;AAEjE,SAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;;AAErB,MAAI,UAAU,YAAA,CAAC;AACf,MAAI,WAAW,YAAA,CAAC;;AAEhB,QAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAC,GAAG,EAAE,OAAO,CAAC,QAAQ,EAAC,EAAE,UAAA,GAAG,EAAI;AACjD,WAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AACjB,cAAU,GAAG,GAAG,CAAC;GAClB,CAAC,CAAC;;AAEH,QAAM,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,UAAS,KAAK,EAAE;AAChD,QAAI,KAAK,KAAK,UAAU,CAAC,EAAE,EAC3B;AACE,gBAAU,GAAG,WAAW,CAAC;AACzB,mBAAa,CAAC,WAAW,CAAC,CAAC;AAC3B,YAAM,CAAC,aAAa,CAAC,YAAY,CAAC,EAAE,IAAI,EAAE,EAAE,EAAC,CAAC,CAAC;KAChD;GACF,CAAC;;;AAAC,AAGH,aAAW,GAAG,WAAW,CAAC,YAAW;;AAEnC,cAAU,IAAI,SAAS,CAAC;AACxB,UAAM,CAAC,aAAa,CAAC,YAAY,CAAC,EAAE,IAAI,EAAE,UAAU,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;;AAEpE,QAAI,UAAU,KAAK,CAAC,EACpB;AACE,YAAM,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;KACnC;GAEF,EAAE,SAAS,CAAE,CAAC;CAEhB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;AAAC","file":"background.js","sourcesContent":["'use strict';\n\n\n/*\n    TODOs\n    =====\n    \n    At the moment this works for one tab only\n\n    [ ] Track which tabs were opened and have timers set perâ€“tab\n\n*/\n\n/*\nlet startTime = new Date.now();\nlet currentMillis = today.getMilliseconds()\n*/\nconst TIME_PERIOD = 180000; // 3 * 60 * 1000;\nlet timePeriod = TIME_PERIOD;\nconst TIME_DECR = 1000;\n// const AMBER_PERIOD = 120000; // 2 min\n// const RED_PERIOD = 60000; // 1 min\n\n// const GREEN = '#00CC00';\n// const AMBER = '#FFC200';\n// const RED = '#FF0000';\n\n\nfunction millToTime(millis) {\n  // to seconds\n  let secs = Math.floor( millis / 1000 );\n  let mins = Math.floor( secs / 60 );\n  let remainingSecs = (secs % 60) + '';\n  remainingSecs = remainingSecs.length === 2 ? remainingSecs : '0' + remainingSecs;\n\n  return mins + ':' + remainingSecs;\n}\n\n// function onTabRemove(tabID) {\n//     if (tabID === currentTab.id)\n//     {\n\n//     }\n// }\n\nchrome.runtime.onInstalled.addListener(details => {\n  console.log('previousVersion', details.previousVersion);\n});\n\n\n/*\n    Run everytime a bookmark is launched\n*/\nchrome.runtime.onMessage.addListener(function(request/*, sender*/) {\n\n  console.log(request);\n\n  let currentTab;\n  let countdownID;\n\n  chrome.tabs.create({url: request.redirect}, tab => {\n    console.log(tab);\n    currentTab = tab;\n  });\n\n  chrome.tabs.onRemoved.addListener(function(tabID) {\n    if (tabID === currentTab.id)\n    {\n      timePeriod = TIME_PERIOD;\n      clearInterval(countdownID);\n      chrome.browserAction.setBadgeText({ text: ''});\n    }\n  });\n\n  // Initialise timer\n  countdownID = setInterval(function() {\n\n    timePeriod -= TIME_DECR;\n    chrome.browserAction.setBadgeText({ text: millToTime(timePeriod) });\n\n    if (timePeriod === 0)\n    {\n      chrome.tabs.remove(currentTab.id);\n    }\n\n  }, TIME_DECR );\n\n});\n\n/*\n// Setup initial badge state and callbacks\nchrome.browserAction.setBadgeText({text: millToTime(timePeriod)});\n\nif(timePeriod > AMBER_PERIOD)\n{  \n  chrome.browserAction.setBadgeBackgroundColor({color: GREEN});\n  setTimeout(function() { chrome.browserAction.setBadgeBackgroundColor({color: AMBER}); }, AMBER_PERIOD);\n  setTimeout(function() { chrome.browserAction.setBadgeBackgroundColor({color: RED}); }, RED_PERIOD);\n}\nelse if (timePeriod > RED_PERIOD)\n{\n  chrome.browserAction.setBadgeBackgroundColor({color: AMBER});\n  setTimeout(function() { chrome.browserAction.setBadgeBackgroundColor({color: RED}); }, RED_PERIOD);\n}\nelse\n{\n  chrome.browserAction.setBadgeBackgroundColor({color: RED});\n}\n*/\n\n\n\n// console.log('\\'Allo \\'Allo! Event Page for Browser Action');"]}